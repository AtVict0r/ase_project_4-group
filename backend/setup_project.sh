#!/bin/bash

# Define base directory
BASE_DIR="/var/www/stevenalvarez.me/django/backend"

# Create project and app directories
mkdir -p "$BASE_DIR/myproject/myapp"
mkdir -p "$BASE_DIR/static"
mkdir -p "$BASE_DIR/staticfiles"
mkdir -p "$BASE_DIR/templates"

# Create essential files for Django project
touch "$BASE_DIR/manage.py"
touch "$BASE_DIR/requirements.txt"

# Create __init__.py files to make directories packages
touch "$BASE_DIR/myproject/__init__.py"
touch "$BASE_DIR/myproject/myapp/__init__.py"

# Create basic views.py with IndexView
cat <<EOL > "$BASE_DIR/myproject/myapp/views.py"
from django.views.generic import TemplateView

class IndexView(TemplateView):
    template_name = 'index.html'
EOL

# Create basic urls.py for the project
cat <<EOL > "$BASE_DIR/myproject/urls.py"
from django.contrib import admin
from django.urls import path
from rest_framework_simplejwt.views import TokenObtainPairView, TokenRefreshView
from django.conf import settings
from django.conf.urls.static import static
from myapp.views import IndexView
from myapp import views

urlpatterns = [
    path('', IndexView.as_view(), name='index'),
    path('admin/', admin.site.urls),
    path('login/', views.login_view, name='login'),
    path('csrf-token/', views.get_csrf_token, name='csrf-token'),
    path('about/', views.about, name='about'),
    # Recipe URLs
    path('recipes/', views.recipes, name='recipes'),
    path('recipes/edit/<int:recipe_id>/', views.edit_recipe, name='edit_recipe'),
    path('recipes/<int:pk>/', views.recipe_detail, name='recipe_detail'),
    path('recipes/new/', views.new_recipe, name='new_recipe'),
    path('recipes/add/', views.add_recipe, name='add_recipe'),
    path('recipes/post/', views.post_recipe, name='post_recipe'),
    path('recipes/delete/<int:id>/', views.delete_recipe, name='delete_recipe'),
    path('recipes/remove/', views.remove_recipe, name='remove_recipe'),
    path('recipes/get_all/', views.get_all_recipes, name='get_all_recipes'),
    path('get_all_recipes/', views.get_all_recipes, name='get_all_recipes'),
    path('recipes/get/<int:recipe_id>/', views.get_recipe, name='get_recipe'),
    path('recipes/update/<int:id>/', views.edit_recipe, name='edit_recipe'),
    path('thankyou/', views.thankyou, name='thankyou'),
    path('thankyou_add/', views.thankyou_add, name='thankyou_add'),
    path('register/', views.register_view, name='register_view'),
    path('signup/', views.SignupView.as_view(), name='signup'),
    path('get-imageurl/', views.get_imageurl, name='get_imageurl'),
    # API URLs
    path('api/get_profile/', views.get_profile, name='get_profile'),
    path('api/update_email/', views.update_email, name='update_email'),
    path('api/update_password/', views.update_password, name='update_password'),
    path('api/update_name/', views.update_name, name='update_name'),
    path('api/delete_account/', views.delete_account, name='delete_account'),
    path('api/get_user_info/', views.get_user_info, name='get_user_info'),
    path('api/token/', TokenObtainPairView.as_view(), name='token_obtain_pair'),
    path('api/token/refresh/', TokenRefreshView.as_view(), name='token_refresh'),
    path('profile-settings/', views.profile_settings, name='profile_settings'),
    path('change-first-name/', views.change_first_name, name='change_first_name'),
    path('change-last-name/', views.change_last_name, name='change_last_name'),
    path('change-email/', views.change_email, name='change_email'),
    path('change-password/', views.change_password, name='change_password'),
    path('delete-account/', views.delete_account, name='delete_account'),
    # Profile settings URLs
    path('profile/settings/', views.profile_settings, name='profile_settings'),
    # Review URLs
    path('reviews/create/', views.create_review, name='create_review'),
    path('reviews/all/', views.get_all_reviews, name='get_all_reviews'),
    path('reviews/', views.get_review, name='get_review'),
    path('reviews/update/', views.update_review, name='update_review'),
    path('reviews/delete/', views.delete_review, name='delete_review'),
    # Shop item URLs
    path('shop-items/', views.get_all_shop_items, name='get_all_shop_items'),
    path('shop-items/<int:item_id>/', views.get_shop_item, name='get_shop_item'),
    path('shop-items/create/', views.post_shop_item, name='post_shop_item'),
    path('shop-items/delete/', views.delete_shop_item, name='delete_shop_item'),
    path('shop-items/update/', views.update_shop_item, name='update_shop_item'),
] + static(settings.STATIC_URL, document_root=settings.STATIC_ROOT)
EOL

# Create basic settings.py
cat <<EOL > "$BASE_DIR/myproject/settings.py"
"""
Django settings for myproject project.

Generated by 'django-admin startproject' using Django.

For more information on this file, see
https://docs.djangoproject.com/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/dev/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/dev/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-<your-secret-key>'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'rest_framework_simplejwt.token_blacklist',
    'corsheaders',
    'myapp',  # Ensure this is your correct app configuration
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'myproject.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],  # Add directories here if your templates are not in the default location
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'myproject.wsgi.application'


# Database
# https://docs.djangoproject.com/en/dev/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',  # or 'django.db.backends.sqlite3', 'django.db.backends.mysql', etc.
        'NAME': 'recipe_db',
        'USER': 'postgres',
        'PASSWORD': 'dbpassword!',
        'HOST': 'localhost',
        'PORT': '5432',
    }
}


# Password validation
# https://docs.djangoproject.com/en/dev/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/dev/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/dev/howto/static-files/

STATIC_URL = '/static/'
STATICFILES_DIRS = [BASE_DIR / 'static']
STATIC_ROOT = BASE_DIR / 'staticfiles'

# Default primary key field type
# https://docs.djangoproject.com/en/dev/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Simple JWT settings
SIMPLE_JWT = {
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',
    'AUTH_HEADER_TYPES': ('Bearer',),
}
EOL

# Create wsgi.py
cat <<EOL > "$BASE_DIR/myproject/wsgi.py"
"""
WSGI config for myproject project.

It exposes the WSGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/dev/howto/deployment/wsgi/
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')

application = get_wsgi_application()
EOL

# Create asgi.py
cat <<EOL > "$BASE_DIR/myproject/asgi.py"
"""
ASGI config for myproject project.

It exposes the ASGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/dev/howto/deployment/asgi/
"""

import os

from django.core.asgi import get_asgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')

application = get_asgi_application()
EOL

# Create basic __init__.py in myproject
touch "$BASE_DIR/myproject/__init__.py"

# Create basic __init__.py in myapp
touch "$BASE_DIR/myproject/myapp/__init__.py"

echo "Directory structure and initial files have been set up."
